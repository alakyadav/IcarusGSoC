import sys
import numpy as np
from matplotlib import pyplot as plt

# m^2 * kg^1 * s^(-2) * K^(-1)
kB = 1.38e-23

# m^2 * kg^1 * s^(-1)
h = 6.626e-34

# m^1 * s^(-1)
c = 3.0e+8

x = 2 * h * c**2

# Units in meters.
solar_r = 6.95700e+8
parsecs = 3.086e+16

"""
Data from
-http://www.astrophysicsspectator.com/topics/observation/MagnitudesAndColors.html
-https://en.wikipedia.org/wiki/Photometric_system
"""

# 0 Magnitude Flux in MKS system units.
U = 0.03980
B = 0.06950
V = 0.03630
R = 0.02254

# Effective wavelength midpoint for standard filters (in nanometres).
u_eff = 365
b_eff = 445
v_eff = 551
r_eff = 658


def flux(T, wl):
    """
    Return the spectral radiance of blackbody.

    Parameters
    ----------
    T: int
       Temperature in kelvin.
    wl: float
       Wavelength in metres.

    Returns
    -------
    B: float
       Spectral radiance in W^1 * sr^(-1) * m^(-3)

    """
    try:
        a = (h * c) / (wl * kB * T)
        b = np.exp(a) - 1
        d = wl**5
        B = x / (b * d)
        return B
    except ZeroDivisionError:
        return 0


if __name__ == '__main__':
    T = int(sys.argv[1])
    flux_wl = {}  # Stores flux (SI unit), wavelength (nanometres) pairs.

    # Min and max wavelength values in nanometres.
    wl_min = 0
    wl_max = 1000
    wl_nm = wl_min

    # Calculate flux for wavelengths and store in dict.
    while wl_nm <= wl_max:
        wl = wl_nm * 1e-9
        flux_wl[wl_nm] = flux(T, wl)
        wl_nm += 1

    R_ = 1 * solar_r
    r = 10 * parsecs
    ra = (R_/r)**2

    # Calculate approximate magnitude for filters.
    mv_U = round(-2.5 * np.log10(flux_wl[u_eff] * ra / U), 2)
    mv_B = round(-2.5 * np.log10(flux_wl[b_eff] * ra / B), 2)
    mv_V = round(-2.5 * np.log10(flux_wl[v_eff] * ra / V), 2)
    mv_R = round(-2.5 * np.log10(flux_wl[r_eff] * ra / R), 2)

    # Plot flux vs. wavelength graph along with the calculated values and
    # save to PNG file.
    plt.plot(list(flux_wl.keys()), list(flux_wl.values()), 'r.')
    plt.annotate("U: " + str(mv_U) + "\nB: " + str(mv_B) + "\nV: " +
                 str(mv_V) + "\nR: " + str(mv_R), xy=(0.80, 0.80),
                 xycoords='axes fraction')
    plt.xticks(np.arange(wl_min, wl_max+1, 100))
    plt.xlabel('Wavelength ($\mathregular{10^{-9}m}$)', fontsize=10)
    plt.ylabel('Flux (W$\mathregular{sr^{-1}}$$\mathregular{m^{-3}}$)',
               fontsize=10)
    plt.title('Flux vs Wavelength graph for a blackbody for constant temperature T\
= ' + str(T) + 'K', fontsize=7)
    plt.savefig('Flux vs. Wavelength.png')
    plt.close()
